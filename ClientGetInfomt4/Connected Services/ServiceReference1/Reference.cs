//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientGetInfomt4.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ConnectServer", ReplyAction="http://tempuri.org/IService1/ConnectServerResponse")]
        void ConnectServer(string botName, bool IsConnect, System.DateTime DateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ConnectServer", ReplyAction="http://tempuri.org/IService1/ConnectServerResponse")]
        System.Threading.Tasks.Task ConnectServerAsync(string botName, bool IsConnect, System.DateTime DateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SystemRestart", ReplyAction="http://tempuri.org/IService1/SystemRestartResponse")]
        void SystemRestart(string botName, bool IsConnect, System.DateTime DateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SystemRestart", ReplyAction="http://tempuri.org/IService1/SystemRestartResponse")]
        System.Threading.Tasks.Task SystemRestartAsync(string botName, bool IsConnect, System.DateTime DateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/BotStart", ReplyAction="http://tempuri.org/IService1/BotStartResponse")]
        void BotStart(string botName, bool IsConnect, System.DateTime DateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/BotStart", ReplyAction="http://tempuri.org/IService1/BotStartResponse")]
        System.Threading.Tasks.Task BotStartAsync(string botName, bool IsConnect, System.DateTime DateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/BotStop", ReplyAction="http://tempuri.org/IService1/BotStopResponse")]
        void BotStop(string botName, bool IsConnect, System.DateTime DateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/BotStop", ReplyAction="http://tempuri.org/IService1/BotStopResponse")]
        System.Threading.Tasks.Task BotStopAsync(string botName, bool IsConnect, System.DateTime DateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IntropInternet", ReplyAction="http://tempuri.org/IService1/IntropInternetResponse")]
        void IntropInternet(string botName, bool IsConnect, System.DateTime DateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IntropInternet", ReplyAction="http://tempuri.org/IService1/IntropInternetResponse")]
        System.Threading.Tasks.Task IntropInternetAsync(string botName, bool IsConnect, System.DateTime DateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ServerException", ReplyAction="http://tempuri.org/IService1/ServerExceptionResponse")]
        void ServerException(string botName, System.Exception Ex, System.DateTime DateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ServerException", ReplyAction="http://tempuri.org/IService1/ServerExceptionResponse")]
        System.Threading.Tasks.Task ServerExceptionAsync(string botName, System.Exception Ex, System.DateTime DateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ServiceStart", ReplyAction="http://tempuri.org/IService1/ServiceStartResponse")]
        void ServiceStart(string botName, [System.ServiceModel.MessageParameterAttribute(Name="ServiceStart")] bool ServiceStart1, System.DateTime DateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ServiceStart", ReplyAction="http://tempuri.org/IService1/ServiceStartResponse")]
        System.Threading.Tasks.Task ServiceStartAsync(string botName, bool ServiceStart, System.DateTime DateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ServiceStop", ReplyAction="http://tempuri.org/IService1/ServiceStopResponse")]
        void ServiceStop(string botName, [System.ServiceModel.MessageParameterAttribute(Name="ServiceStop")] bool ServiceStop1, System.DateTime DateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ServiceStop", ReplyAction="http://tempuri.org/IService1/ServiceStopResponse")]
        System.Threading.Tasks.Task ServiceStopAsync(string botName, bool ServiceStop, System.DateTime DateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/BidAsk", ReplyAction="http://tempuri.org/IService1/BidAskResponse")]
        void BidAsk(string botName, string Symbol, string Bid, string Ask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/BidAsk", ReplyAction="http://tempuri.org/IService1/BidAskResponse")]
        System.Threading.Tasks.Task BidAskAsync(string botName, string Symbol, string Bid, string Ask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SymbolBidAsk", ReplyAction="http://tempuri.org/IService1/SymbolBidAskResponse")]
        void SymbolBidAsk(string botName, string Action, string Ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SymbolBidAsk", ReplyAction="http://tempuri.org/IService1/SymbolBidAskResponse")]
        System.Threading.Tasks.Task SymbolBidAskAsync(string botName, string Action, string Ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Exceptionmessage", ReplyAction="http://tempuri.org/IService1/ExceptionmessageResponse")]
        void Exceptionmessage(string botName, System.Exception Ex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Exceptionmessage", ReplyAction="http://tempuri.org/IService1/ExceptionmessageResponse")]
        System.Threading.Tasks.Task ExceptionmessageAsync(string botName, System.Exception Ex);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : ClientGetInfomt4.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<ClientGetInfomt4.ServiceReference1.IService1>, ClientGetInfomt4.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void ConnectServer(string botName, bool IsConnect, System.DateTime DateTime) {
            base.Channel.ConnectServer(botName, IsConnect, DateTime);
        }
        
        public System.Threading.Tasks.Task ConnectServerAsync(string botName, bool IsConnect, System.DateTime DateTime) {
            return base.Channel.ConnectServerAsync(botName, IsConnect, DateTime);
        }
        
        public void SystemRestart(string botName, bool IsConnect, System.DateTime DateTime) {
            base.Channel.SystemRestart(botName, IsConnect, DateTime);
        }
        
        public System.Threading.Tasks.Task SystemRestartAsync(string botName, bool IsConnect, System.DateTime DateTime) {
            return base.Channel.SystemRestartAsync(botName, IsConnect, DateTime);
        }
        
        public void BotStart(string botName, bool IsConnect, System.DateTime DateTime) {
            base.Channel.BotStart(botName, IsConnect, DateTime);
        }
        
        public System.Threading.Tasks.Task BotStartAsync(string botName, bool IsConnect, System.DateTime DateTime) {
            return base.Channel.BotStartAsync(botName, IsConnect, DateTime);
        }
        
        public void BotStop(string botName, bool IsConnect, System.DateTime DateTime) {
            base.Channel.BotStop(botName, IsConnect, DateTime);
        }
        
        public System.Threading.Tasks.Task BotStopAsync(string botName, bool IsConnect, System.DateTime DateTime) {
            return base.Channel.BotStopAsync(botName, IsConnect, DateTime);
        }
        
        public void IntropInternet(string botName, bool IsConnect, System.DateTime DateTime) {
            base.Channel.IntropInternet(botName, IsConnect, DateTime);
        }
        
        public System.Threading.Tasks.Task IntropInternetAsync(string botName, bool IsConnect, System.DateTime DateTime) {
            return base.Channel.IntropInternetAsync(botName, IsConnect, DateTime);
        }
        
        public void ServerException(string botName, System.Exception Ex, System.DateTime DateTime) {
            base.Channel.ServerException(botName, Ex, DateTime);
        }
        
        public System.Threading.Tasks.Task ServerExceptionAsync(string botName, System.Exception Ex, System.DateTime DateTime) {
            return base.Channel.ServerExceptionAsync(botName, Ex, DateTime);
        }
        
        public void ServiceStart(string botName, bool ServiceStart1, System.DateTime DateTime) {
            base.Channel.ServiceStart(botName, ServiceStart1, DateTime);
        }
        
        public System.Threading.Tasks.Task ServiceStartAsync(string botName, bool ServiceStart, System.DateTime DateTime) {
            return base.Channel.ServiceStartAsync(botName, ServiceStart, DateTime);
        }
        
        public void ServiceStop(string botName, bool ServiceStop1, System.DateTime DateTime) {
            base.Channel.ServiceStop(botName, ServiceStop1, DateTime);
        }
        
        public System.Threading.Tasks.Task ServiceStopAsync(string botName, bool ServiceStop, System.DateTime DateTime) {
            return base.Channel.ServiceStopAsync(botName, ServiceStop, DateTime);
        }
        
        public void BidAsk(string botName, string Symbol, string Bid, string Ask) {
            base.Channel.BidAsk(botName, Symbol, Bid, Ask);
        }
        
        public System.Threading.Tasks.Task BidAskAsync(string botName, string Symbol, string Bid, string Ask) {
            return base.Channel.BidAskAsync(botName, Symbol, Bid, Ask);
        }
        
        public void SymbolBidAsk(string botName, string Action, string Ticket) {
            base.Channel.SymbolBidAsk(botName, Action, Ticket);
        }
        
        public System.Threading.Tasks.Task SymbolBidAskAsync(string botName, string Action, string Ticket) {
            return base.Channel.SymbolBidAskAsync(botName, Action, Ticket);
        }
        
        public void Exceptionmessage(string botName, System.Exception Ex) {
            base.Channel.Exceptionmessage(botName, Ex);
        }
        
        public System.Threading.Tasks.Task ExceptionmessageAsync(string botName, System.Exception Ex) {
            return base.Channel.ExceptionmessageAsync(botName, Ex);
        }
    }
}
